@model WebSite.Models.UI.Portfolio
@{
    ViewBag.Title = "Stocks and Options Portfolio";
}
@section Description
{
    <meta name="description" content="Portfolio of stock and options selections showcasing both open and closed positions in year @DateTime.UtcNow.Year." />
}
@section Styles
{
    <style type="text/css">
        .clickable-row
        {
            cursor: pointer;
        }

            .clickable-row:hover
            {
                background-color: #3b85e0;
            }

        .grey-background
        {
            background-color: #deeffc;
        }

        #body > table
        {
             margin: 0px auto; border-spacing: 0px; border-collapse: collapse; border-style: solid; border-width: 1px; border-color: #CCCCCC;
        }

        #body tr
        {
            border-bottom: solid 1px #CCCCCC;
        }

        #body td
        {
            padding-top: 2px;
        }

        #body h3
        {
            padding-top: 10px;
            padding-bottom: 10px;
        }
    </style>
}
@section Scripts
{
    @Scripts.Render("~/bundles/subscription")
}
<h2>Portfolio</h2>
@if (Request.IsAuthenticated)
{
    WebSite.Models.User currentUser = WebSite.Helpers.Authentication.Authentication.GetCurrentUser();
    
    // Load user's subscriptions eagerly before looping over stocks and options
    WebSite.Database.DatabaseContext.GetInstance().Entry(currentUser).Collection(user => user.SubscribedPicks).Load();
    
<h3 style="margin-left: 6%;">Stocks</h3>
<table style="text-align: center; width: 70%;">
    <thead>
        <tr>
            <td>Symbol</td>
            <td>Price</td>
            <td>Entered On</td>
            <td>Reason</td>
            <td>Type</td>
            <td>Follow</td>
        </tr>
    </thead>
    <tbody>
        @{ 
            int stockIndex = 0; 
                        
            foreach (var stockPick in Model.Stocks)
            {
                string background = string.Empty;

                if ((stockIndex & 1) > 0)
                {
                    background = "grey-background";
                }

                string detailLink = "window.location.href = '" + Url.Action("StockPickDetail", "Picks", new { stockPickId = stockPick.PickId }) + "';";
               
                <tr class="clickable-row @(background)">
                    <td onclick="@detailLink">@stockPick.Symbol</td>
                    <td onclick="@detailLink">@stockPick.EntryPrice.ToString("C")</td>
                    <td onclick="@detailLink">@stockPick.PublishingDate.Value.ToShortDateString()</td>
                    <td onclick="@detailLink">@stockPick.Type.Name</td>
                    @if (stockPick.IsLongPosition)
                    {
                        <td onclick="@detailLink" style="color: #21892a">Long</td>
                    }
                    else
                    {
                        <td onclick="@detailLink" style="color: #ad2222">Short</td>
                    }
                    <td>@Html.Partial("_PickSubscriptionPartial", new WebSite.Models.UI.PickSubscription { Pick = stockPick, Subscriptions = currentUser.SubscribedPicks })</td>
                </tr>
        
                stockIndex++;
            }
        }
    </tbody>
</table>
<h3 style="margin-left:6%;">Options</h3>
<table style="text-align: center; width: 70%;">
    <thead>
        <tr>
            <td>Underlying Symbol</td>
            <td>Strategy Type</td>
            <td>Price</td>
            <td>Entered On</td>
            <td>Follow</td>
        </tr>
    </thead>
    <tbody>
        @{
            int optionIndex = 0;
            foreach (var optionPick in Model.Options)
            {
                string background = string.Empty;
                if ((optionIndex & 1) > 0)
                {
                    background = "grey-background";
                }

                string detailLink = "window.location.href = '" + Url.Action("OptionPickDetail", "Picks", new { optionPickId = optionPick.PickId }) + "';";
                
                <tr class="clickable-row @(background)">
                    <td onclick="@(detailLink)">@optionPick.Symbol</td>
                    <td onclick="@(detailLink)">@optionPick.Type.Name</td>
                    <td onclick="@(detailLink)">@optionPick.Cost().ToString("C")</td>
                    <td onclick="@(detailLink)">@optionPick.PublishingDate.Value.ToShortDateString()</td>
                    <td>@Html.Partial("_PickSubscriptionPartial", new WebSite.Models.UI.PickSubscription { Pick = optionPick, Subscriptions = currentUser.SubscribedPicks })</td>
                </tr>
                optionIndex++;
            }
        }
    </tbody>
</table>
}
else
{
    <p class="message-info">Since you are not logged in, you are only seeing our stock and option positions that have been closed. To see our current portfolio with our stock and option picks, please log in.</p>
}
<h3>Stock positions closed within the last 31 days</h3>
@Html.Partial("_ClosedStockListPartial", Model.ClosedStocks)
<h3>Option positions closed within the last 31 days</h3>
@Html.Partial("_ClosedOptionListPartial", Model.ClosedOptions)