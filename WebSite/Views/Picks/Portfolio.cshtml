@model WebSite.Models.UI.Portfolio
@{
    ViewBag.Title = "Stocks and Options Portfolio";
}
@section Description
{
    <meta name="description" content="Portfolio of stock and options selections showcasing both open and closed positions in year @DateTime.UtcNow.Year." />
}
@section Styles
{
    <style type="text/css">
        .clickable-row
        {
            cursor: pointer;
        }

            .clickable-row:hover
            {
                background-color: #3b85e0;
            }

        .grey-background
        {
            background-color: #deeffc;
        }

        #body > table
        {
             margin: 0px auto; border-spacing: 0px; border-collapse: collapse; border-style: solid; border-width: 1px; border-color: #CCCCCC;
        }

        #body tr
        {
            border-bottom: solid 1px #CCCCCC;
        }

        #body td
        {
            padding-top: 2px;
        }

        #body h3
        {
            padding-top: 10px;
            padding-bottom: 10px;
        }
    </style>
}
@section Scripts
{
    @Scripts.Render("~/bundles/subscription")

    <script type="text/javascript">
        $(function ()
        {
            var stockRows = $("#tbody-stock-picks > tr");
            var symbols = new Array();
            var intervalId = 0;

            // If there are no picks (the user may not be logged in), then bail out.
            if (stockRows.length == 0)
            {
                return;
            }

            // Build query
            $.each(stockRows, function (index, value)
            {
                symbols[index] = "'" + value.getAttribute("data-symbol") + "'";
            });
            var symbolList = symbols.join("%2C%20"); // , html encoded
            var url = "http://query.yahooapis.com/v1/public/yql?q=select%20LastTradePriceOnly%2C%20Symbol%2C%20LastTradeTime%20from%20yahoo.finance.quotes%20where%20symbol%20in%20(" + symbolList + ")&format=json&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&callback=?";

            updateQuote = function (data)
            {
                var symbolRow = undefined;
                
                // Find the row that needs to be updated
                $.each(stockRows, function(index, item)
                {
                    if (item.getAttribute("data-symbol") == data.Symbol.toLowerCase())
                    {
                        // Found the item in question, stop iterating
                        symbolRow = $(item);
                        return false;
                    }

                    return true;
                });

                if (symbolRow)
                {
                    var entryPrice = symbolRow.attr("data-entry-price");
                    var price = data.LastTradePriceOnly;
                    var change = ((price - entryPrice) / entryPrice) * 100;

                    // If the position is short, then flip the profit/loss
                    if (symbolRow.attr("data-position-type") == "False")
                    {
                        change = change * -1;
                    }

                    symbolRow.find("[data-field='price']").html("$" + price);
                    
                    var changeCell = symbolRow.find("[data-field='change']");
                        
                    changeCell.html(change.toFixed(2) + "%");

                    if (change >= 0)
                    {
                        changeCell.addClass("green-quote");
                        changeCell.removeClass("red-quote");
                    }
                    else
                    {
                        changeCell.addClass("red-quote");
                        changeCell.addClass("green-quote");
                    }
                }
            };

            fetchQuotes = function ()
            {
                $.getJSON(url, function (data)
                {
                    if (data.query.results)
                    {
                        $.each(data.query.results.quote, function (index, quoteInformation)
                        {
                            updateQuote(quoteInformation);
                        });

                        // If the market is closed, stop requesting quotes
                        if (intervalId != 0 && Date.parse("01/01/2012 4:00PM") <= Date.parse("01/01/2012 " + data.query.results.quote[0].LastTradeTime))
                        {
                            clearInterval(intervalId);
                        }
                    }
                });
            };

            // Get quotes on lead
            fetchQuotes.call();

            // Update the quotes every two seconds
            intervalId = window.setInterval(fetchQuotes, 2000);
        });
    </script>
}
<h2>Portfolio</h2>
@if (Request.IsAuthenticated)
{
    WebSite.Models.User currentUser = WebSite.Helpers.Authentication.Authentication.GetCurrentUser();
    
    // Load user's subscriptions eagerly before looping over stocks and options
    WebSite.Database.DatabaseContext.GetInstance().Entry(currentUser).Collection(user => user.SubscribedPicks).Load();
    
<h3>Stocks</h3>
<table style="text-align: center; width: 90%;">
    <thead>
        <tr>
            <td>Symbol</td>
            <td>Entry Price</td>
            <td>Current Price</td>
            <td>Change</td>
            <td>Entered On</td>
            <td>Reason</td>
            <td>Type</td>
            <td>Follow</td>
        </tr>
    </thead>
    <tbody id="tbody-stock-picks">
        @{ 
            int stockIndex = 0; 
                        
            foreach (var stockPick in Model.Stocks)
            {
                string background = string.Empty;

                if ((stockIndex & 1) > 0)
                {
                    background = "grey-background";
                }

                string detailLink = "window.location.href = '" + Url.Action("StockPickDetail", "Picks", new { stockPickId = stockPick.PickId }) + "';";
               
                <tr class="clickable-row @(background)" data-symbol="@stockPick.Symbol.ToLower()" data-entry-price="@stockPick.EntryPrice" data-position-type="@stockPick.IsLongPosition">
                    <td onclick="@detailLink">@stockPick.Symbol</td>
                    <td onclick="@detailLink">@stockPick.EntryPrice.ToString("C")</td>
                    <td onclick="@(detailLink)" data-field="price"></td>
                    <td onclick="@(detailLink)" data-field="change"></td>
                    <td onclick="@detailLink">@stockPick.PublishingDate.Value.ToShortDateString()</td>
                    <td onclick="@detailLink">@stockPick.Type.Name</td>
                    @if (stockPick.IsLongPosition)
                    {
                        <td onclick="@detailLink" style="color: #21892a">Long</td>
                    }
                    else
                    {
                        <td onclick="@detailLink" style="color: #ad2222">Short</td>
                    }
                    <td>@Html.Partial("_PickSubscriptionPartial", new WebSite.Models.UI.PickSubscription { Pick = stockPick, Subscriptions = currentUser.SubscribedPicks })</td>
                </tr>
        
                stockIndex++;
            }
        }
    </tbody>
</table>
<h3>Options</h3>
<table style="text-align: center; width: 70%;">
    <thead>
        <tr>
            <td>Underlying Symbol</td>
            <td>Strategy Type</td>
            <td>Entry Price</td>
            <td>Entered On</td>
            <td>Follow</td>
        </tr>
    </thead>
    <tbody>
        @{
            int optionIndex = 0;
            foreach (var optionPick in Model.Options)
            {
                string background = string.Empty;
                if ((optionIndex & 1) > 0)
                {
                    background = "grey-background";
                }

                string detailLink = "window.location.href = '" + Url.Action("OptionPickDetail", "Picks", new { optionPickId = optionPick.PickId }) + "';";
                
                <tr class="clickable-row @(background)">
                    <td onclick="@(detailLink)">@optionPick.Symbol</td>
                    <td onclick="@(detailLink)">@optionPick.Type.Name</td>
                    <td onclick="@(detailLink)">@optionPick.Cost().ToString("C")</td>
                    <td onclick="@(detailLink)">@optionPick.PublishingDate.Value.ToShortDateString()</td>
                    <td>@Html.Partial("_PickSubscriptionPartial", new WebSite.Models.UI.PickSubscription { Pick = optionPick, Subscriptions = currentUser.SubscribedPicks })</td>
                </tr>
                optionIndex++;
            }
        }
    </tbody>
</table>
}
else
{
    <p class="message-info">Since you are not logged in, you are only seeing our stock and option positions that have been closed. To see our current portfolio with our stock and option picks, please log in.</p>
}
<h3>Stock positions closed within the last 31 days</h3>
@Html.Partial("_ClosedStockListPartial", Model.ClosedStocks)
<h3>Option positions closed recently (last 20 trades)</h3>
@Html.Partial("_ClosedOptionListPartial", Model.ClosedOptions)