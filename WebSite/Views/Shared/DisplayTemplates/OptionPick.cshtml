@model WebSite.Models.Data.Picks.OptionPick
@using WebSite.Models.Data.Picks
<h2>@(Model.Type.Name) on @(Model.Symbol) on @(Model.PublishingDate.HasValue ? Model.PublishingDate.Value.ToShortDateString() : "Unpublished")</h2>
@(Html.Raw(Model.Description))
<table style="width: 100%;">
    <tr>
        <td style="width: 50%; vertical-align: top;">
            <h3>Trade</h3>
            <ul>
                @foreach (var leg in Model.Legs)
                {
                    <li>@((leg.Quantity > 0) ? "Buy" : "Sell") @(Math.Abs(leg.Quantity)) @(Enum.GetName(typeof(OptionPickLegExpirationMonth), (OptionPickLegExpirationMonth)leg.ExpirationMonth)) @(leg.StrikePrice.ToString("C")) @(Enum.GetName(typeof(OptionPickLegType), (OptionPickLegType)leg.Type)) at @(leg.EntryPrice.ToString("C"))</li>
                }
                <li>For a net @((Model.Cost() >= 0) ? "debit" : "credit") of @(Model.Cost().ToString("C"))</li>
            </ul>
            <h3>Profit/Loss Analysis</h3>
            @{
                Tuple<decimal, decimal> maxProfit = Model.MaximumProfit();
                Tuple<decimal, decimal> maxLoss = Model.MaximumLoss();
            }
            <ul>
                @{
                    List<decimal> breakevenPoints = Model.BreakevenPoints();
                    if (breakevenPoints.Count > 0)
                    {
                    <li>Breakeven at @(string.Join(" and ", breakevenPoints.Select(val => val.ToString("C"))))</li>
                    }
                }
                <li>Maximum profit is @(maxProfit == null ? "unbounded" : maxProfit.Item2.ToString("C") + " at strike of " + maxProfit.Item1.ToString("C"))</li>
                <li>Maximum loss is @(maxLoss == null ? "unbounded" : maxLoss.Item2.ToString("C") + " at strike of " + maxLoss.Item1.ToString("C"))</li>
            </ul>
            @if (Model.ClosingDate.HasValue)
            {
                <h3>Closing Summary</h3>
                <ul>
                    @foreach (var leg in Model.Legs)
                    {
                        <li>@((leg.Quantity < 0) ? "Bought" : "Sold") @(Math.Abs(leg.Quantity)) @(Enum.GetName(typeof(OptionPickLegExpirationMonth), (OptionPickLegExpirationMonth)leg.ExpirationMonth)) @(leg.StrikePrice.ToString("C")) @(Enum.GetName(typeof(OptionPickLegType), (OptionPickLegType)leg.Type)) at @(leg.ExitPrice.Value.ToString("C"))</li>
                    }
                </ul>
            }
        </td>
        <td style="width: 50%; text-align: center; vertical-align: top;">
            <img src="http://www.stockwinners.com/@Url.Action("OptionPickExpiryGraph", "Picks", new { area = "", pickId = Model.PickId })" />
        </td>
    </tr>
</table>
@if (Model.ClosingDate.HasValue)
{
    decimal change = Model.Change();
    if (change >= 0m)
    {
    <h2>Position closed on @(Model.ClosingDate.Value.ToShortDateString()) at price of @(Model.Proceeds().ToString("C")) with a <span style="font-weight: 400; color: green;">@change.ToString("F")% gain</span> in @((Model.ClosingDate.Value - Model.PublishingDate.Value).Days) days.</h2>
    }
    else
    {
    <h2>Position closed on @(Model.ClosingDate.Value.ToShortDateString()) at price of @(Model.Proceeds().ToString("C")) with a <span style="font-weight: 400; color: red;">@change.ToString("F")% loss</span> in @((Model.ClosingDate.Value - Model.PublishingDate.Value).Days) days.</h2>        
    }
}
@Html.Partial("_PickUpdatesPartial", Model)